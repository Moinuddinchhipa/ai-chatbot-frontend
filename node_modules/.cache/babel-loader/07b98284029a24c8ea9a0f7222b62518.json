{"ast":null,"code":"var _jsxFileName = \"D:\\\\ai-chatbot\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ChatApp.css'; // Importing the CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [message, setMessage] = useState('');\n  const [chatLog, setChatLog] = useState([]);\n  const [user, setUser] = useState('User'); // Default name 'User'\n\n  // 🔁 Load history on page load\n  useEffect(() => {\n    const savedUser = localStorage.getItem('chatUser');\n    if (savedUser) {\n      setUser(savedUser);\n    } else {\n      setUser('User');\n      localStorage.setItem('chatUser', 'User');\n    }\n\n    // Fetch chat history\n    fetch('http://localhost:8000/history').then(res => res.json()).then(data => setChatLog(data)).catch(err => console.error('Failed to fetch chat history:', err));\n  }, []);\n  const sendMessage = async () => {\n    if (!message.trim()) return;\n    const newChat = {\n      sender: 'user',\n      text: message\n    };\n    setChatLog([...chatLog, newChat]);\n    setMessage('');\n    try {\n      const res = await fetch('http://localhost:8000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message,\n          user\n        })\n      });\n      const data = await res.json();\n      const botReply = {\n        sender: 'bot',\n        text: data.reply\n      };\n      setChatLog(prev => [...prev, botReply]);\n    } catch (error) {\n      console.error('Error talking to chatbot:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Welcome to the AI Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: chatLog.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.sender}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-sender\",\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: msg.sender === 'user' ? user : 'Bot'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-text\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        className: \"chat-input\",\n        onKeyPress: e => {\n          if (e.key === 'Enter') sendMessage();\n        },\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear-button\",\n          onClick: async () => {\n            await fetch('http://localhost:8000/clear', {\n              method: 'DELETE'\n            });\n            setChatLog([]);\n          },\n          children: \"Clear Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oRcrVPugBNyPCiNoPjWi0/zHAsA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","message","setMessage","chatLog","setChatLog","user","setUser","savedUser","localStorage","getItem","setItem","fetch","then","res","json","data","catch","err","console","error","sendMessage","trim","newChat","sender","text","method","headers","body","JSON","stringify","botReply","reply","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","i","type","value","onChange","e","target","onKeyPress","key","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/ai-chatbot/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './ChatApp.css'; // Importing the CSS file for styling\r\n\r\nfunction App() {\r\n  const [message, setMessage] = useState('');\r\n  const [chatLog, setChatLog] = useState([]);\r\n  const [user, setUser] = useState('User'); // Default name 'User'\r\n\r\n  // 🔁 Load history on page load\r\n  useEffect(() => {\r\n    const savedUser = localStorage.getItem('chatUser');\r\n    if (savedUser) {\r\n      setUser(savedUser);\r\n    } else {\r\n      setUser('User');\r\n      localStorage.setItem('chatUser', 'User');\r\n    }\r\n\r\n    // Fetch chat history\r\n    fetch('http://localhost:8000/history')\r\n      .then(res => res.json())\r\n      .then(data => setChatLog(data))\r\n      .catch(err => console.error('Failed to fetch chat history:', err));\r\n  }, []);\r\n\r\n  const sendMessage = async () => {\r\n    if (!message.trim()) return;\r\n\r\n    const newChat = { sender: 'user', text: message };\r\n    setChatLog([...chatLog, newChat]);\r\n    setMessage('');\r\n\r\n    try {\r\n      const res = await fetch('http://localhost:8000/chat', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ message, user }),\r\n      });\r\n\r\n      const data = await res.json();\r\n      const botReply = { sender: 'bot', text: data.reply };\r\n      setChatLog((prev) => [...prev, botReply]);\r\n    } catch (error) {\r\n      console.error('Error talking to chatbot:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <h2>Welcome to the AI Chatbot</h2>\r\n      <div className=\"chat-box\">\r\n        {chatLog.map((msg, i) => (\r\n          <div\r\n            key={i}\r\n            className={`chat-message ${msg.sender}`}\r\n          >\r\n            <div className=\"chat-sender\"><strong>{msg.sender === 'user' ? user : 'Bot'}</strong></div>\r\n            <div className=\"chat-text\">{msg.text}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"chat-input-area\">\r\n        <input\r\n          type=\"text\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          className=\"chat-input\"\r\n          onKeyPress={(e) => { if (e.key === 'Enter') sendMessage(); }}\r\n          placeholder=\"Type your message...\"\r\n        />\r\n        <div className=\"button-group\">\r\n          <button className=\"send-button\" onClick={sendMessage}>\r\n            Send\r\n          </button>\r\n          <button\r\n            className=\"clear-button\"\r\n            onClick={async () => {\r\n              await fetch('http://localhost:8000/clear', { method: 'DELETE' });\r\n              setChatLog([]);\r\n            }}\r\n          >\r\n            Clear Chat\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}